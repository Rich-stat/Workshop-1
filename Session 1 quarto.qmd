---
title: "Workshop 1 - Introduction to R"
format: 
  html:
    code-overflow: wrap
    df-print: kable
knitr:
  opts_chunk:
    collapse: false
theme: cerulean
editor: visual
code-annotations: select
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
```

## Downloading & Preparing R and RStudio {.tabset}

::: {.callout-note appearance="simple" collapse="true" title="Introduction" icon="true"}
This first workshop aims to introduce you to R and RStudio. R is the programming language; RStudio is the IDE (Integrated Development Environment) that makes R easier to use. You must first download R and then Download RStudio (R is a requirement for RStudio to work).
<br><br>We are going to use RStudio on the cloud (Posit Cloud) during the workshop sessions.  However, the free version only permits 25 hours of computing time per month, and I strongly recommend that you also set up R and RStudio on your own laptop and save the cloud files that we create on the cloud version to your laptop.<br>
You can, of course, also bring your own laptop to the workshops and work on that there.
<br><br>
The 1st tab below shows you how to set up RStudio on the cloud.<br>
The 2nd tab shows you how to set up R and RStudio on your own laptop.
<br><br>
*NB* You can use RStudio on a university computer from AppsAnywhere, but it is not ideal.  the latest versions of R and RStudio are not installed, and you have to install previously used packages every time you use it.
:::

:::::::::::::::: panel-tabset
## Install RStudio (Cloud)

This is the version of RStudio that we will use in the workshops.  However, you should download and save all of the files we use to your own laptop and practice using RStudio on your laptop (see next tab).

Go to [Posit Cloud (click on this link)](https://posit.cloud/)<br><br>

@fig-Posit_cloud_png shows the opening Posit cloud page:

```{r}
#| label: fig-Posit_cloud_png
#| fig-cap: "Posit Cloud"
#| fig-alt: "The opening Posit cloud page looks like this"
#| out.width: "100%"
#| fig-height: 3.5
#| echo: false
#| column: page-right
#| lightbox: true
knitr::include_graphics("Posit cloud.png")
```

- Select '**Get Started**'<br><br>
- You will see a range of plan options: select '**Cloud Free**' by selecting "Learn more' and then sign up to create your own account.  In future, use your ID details and password to login.<br><br>
- Select the blue icon in the top right corner that says '**New Project**'. Create a new RStudio project called '**LS5022 Biostatistics**' (you are allowed 25 projects on the free plan).  It is here that we will work and save our files in all of the workshops.
<br>


## Install RStudio (Laptop)

Go to [RStudio (click on this link)](https://posit.co/download/rstudio-desktop/) <br><br>

![The RStudio web site](RStudio page.png){.lightbox}
<br><br>

1. Install R
    -   Select the version for your computer (mac or Windows)
    -   Click on the first link for *R-(followed by the latest version number).pkg* to download the installation package
        -   For mac users, note which type of Mac you have: Intel or silicon (M1-3). You can find out by clicking on the apple symbol in the top left of your screen and select 'About this mac'.
    -   Follow the installation instructions<br><br>
2. Install RStudio

*Note*: R updates quite regularly, and so it is a good idea to check the latest version of R from time to time. To update, simply repeat the instructions above to install the latest version of R.

## RStudio Setup

**1. RStudio looks like this**<br>

@fig-RStudio_png shows the arrangement of the four windows in RStudio:

```{r}
#| label: fig-RStudio_png
#| fig-cap: "RStudio"
#| fig-alt: "The RStudio windows look like this by default"
#| out.width: "150%"
#| fig-height: 3.5
#| echo: false
#| column: page-right
#| lightbox: true
knitr::include_graphics("RStudio.png")
```

Click on the green '+' symbol at the top left of the screen and select 'R Script'. You will now see 4 areas of the RStudio page:

* The **Code Editor** at the top left area where you will do most of your work and store your code. Here you can write R code and notes to yourself. You can also save the R code and notes in an .R file
* The area below it (bottom left) is the **R Console**, and is essentially like R without RStudio. It is where the R code that you type in the Editor above and its output appears when you run the code.
* Top right is the **Workspace environment** where you can see opened objects and data.
* At the bottom right is the the **File Directory** and where you can navigate to your desired folder, create and delete folders and also see installed packages. Use the Files tab to select the folder in which you wish to save your work.
  + Then click on the More cog and select `Set as Working Directory`. This is now your working folder (you will see the code run in the R Console).
<br><br>


**2. Global Settings**<br>You can set your preferred default 'Global' settings that RStudio will always use (*eg* font, text wrapping, default working directory etc):

::: {.callout-note icon="false" collapse="true" title="Change global settings to your preferences"}

Go to **Tools \> Global Options...**

-   In **General**, you can set your default working directory by browsing to locate your the folder in which you want to work and save files.  On the cloud version, this will usually be `/cloud/project`.<br> Ensuring that '*Restore most recently opened project at startup*' and '*Restore previously open source documents at startup*' are ticked means that what you did last time will open. This can be a useful place to start each time you use RStudio, but you might prefer it if this does not happen, so simply untick them.

-   Select **Code** and then select '*Use native pipe operator*' and also select '*soft-wrap R source files*' <br> Click on *Apply*.

-   In **Appearance**, select font etc. and then *OK* to close the Global Options box.

These settings will be saved in RStudio and used whenever you open it.<br>

![Global options](global_options.gif){.lightbox}
:::

<br> You can always check what your working directory is by typing this simple code into the R Console and running it (press 'Enter'):

```{r}
#| label: check_wd
#| echo: true
#| results: false
getwd()
```

<br> <br> **3. To start a new R session, open an R Script using the green '+' sign at the top left of RStudio**

You are now ready to use RStudio.

In the next tabs, you will do some simple calculations in R and import an Excel file to R.  Most of the work that we will do will involve carrying out statistocal analyses on data imported from Excel files.


## Some simple things!

The first thing I want to do is to load some packages that enhance R for what we are about to do. R has a base language, but packages significantly enhance and add power to what R can do.<br>

::: {.callout-important appearance="simple" collapse="true"}
## Install packages (click to expand/collapse):

You will need to install the following packages for today by running the following code line. Copy and paste them into the Script editor and run them:<br>

```{r}
#| label: install
#| echo: true
#| message: false
#| warning: false
#| eval: false
install.packages(c("tidyverse", "rio", "psych"))
```
These packages will be saved in RStudio to be used in future.<br>
*NB* You can always check which packages you have installed by clicking on 'Packages' in the File Directory window.
:::

Once packages are installed you call them by using the `library()` function:<br>
*NB* You need to do this every time you start a new session.

::: {.callout-important appearance="simple" collapse="true"}
## Call the packages to use them in your session

```{r}
#| label: packages
#| echo: true
#| message: false
#| warning: false
#| eval: true
library(tidyverse)
library(rio)
library(psych)
```
:::

*NB* If R ever says that a package does not exist, it means you need to install it before loading it with `library()`.<br><br> If you want to check what packages are installed, the File Directory window has a tab called 'Packages'. Installed packages are listed. Packages that have been loaded have a tick by them. <br> <br>

::: {.callout-tip appearance="simple" icon="false"}
**CARRY OUT THE FOLLOWING SIMPLE EXERCISES BY TYPING (OR COPYING & PASTING) THE CODE IN THE GREY BOXES BELOW INTO THE R SCRIPT EDITOR:**
:::

**1. To create an object called 'greeting' with text**

```{r}
#| label: hello
#| echo: true
#| eval: false
greeting <- "Hello World" # <1>
greeting # <2>
```

1.  Store 'Hello World' into an object called 'greeting'
2.  To see the content of the object, type its name. <br>

::: {.callout-note collapse="true" title="Click to see the output" icon="false"}
```{r}
#| label: hello_1
#| echo: false
greeting <- "Hello World" 
greeting                  
```
:::

<br> **2. Some basic arithmetic!** <br>
Addition: the calculation is stored in an object called 'add'

```{r}
#| label: add
#| echo: TRUE
#| eval: false
add <- 2+4  # <1>
add         # <2>
```

1.  Here, the sum of 2+4 is stored in an object called 'add'
2.  To see the content of the 'add' object type its name.

::: {.callout-note collapse="true" title="Click to see the output" icon="false"}
```{r}
#| label: add_1
#| echo: false
#| eval: true
add <- 2+4  # <1>
add         # <2>
```
:::

<br>Division:<br>

```{r}
#| label: div
#| echo: true
#| eval: false
div <- 6/2
div
```

::: {.callout-note collapse="true" title="Click to see the output" icon="false"}
```{r}
#| label: div_1
#| echo: false
#| eval: true
div <- 6/2
div
```
:::

<br> **3. Create a vector and store in an object called vector1**

```{r}
#| label: vector
#| echo: TRUE
#| eval: false
vector1 <- c(2,4,5,6,7,8,10,11,14,15,21,25,34,35) # <1>
vector1 # <2>
```

1.  The numbers are 'concatenated' into a column and stored in an object called 'vector1'
2.  Type the name of the object to see its contents.

::: {.callout-note collapse="true" title="Click to see the output" icon="false"}
```{r}
#| label: vector_1
#| echo: false
#| eval: true
vector1 <- c(2,4,5,6,7,8,10,11,14,15,21,25,34,35) # <1>
vector1 # <2>
```
:::

<br> **4. Calculate mean and standard deviation**

```{r}
#| label: mean
#| echo: TRUE
#| eval: false
mean1 <- mean(vector1)  #<1>
mean1  #<2>

sd1 <- sd(vector1)  #<3>
sd1  #<4>
```
1. Use the `mean()` function to calculate the mean of vector1 & store it in `mean1`
2. See the mean value in `mean1`
3. Use the `sd()` function to calculate the standard deviation of `vector1` & store it in `sd1`
4. See the sd value in `sd1`

::: {.callout-note collapse="true" title="Click to see the output" icon="false"}
Mean:

```{r}
#| label: mean_1
#| echo: false
#| eval: true
mean1 <- mean(vector1)
mean1
```

Standard deviation:

```{r}
#| label: SD_1
#| echo: false
#| eval: true
sd1 <- sd(vector1)
sd1
```
:::

<br> **5. Get descriptive statistics of the vector1 data**

```{r}
#| label: descr
#| echo: TRUE
#| eval: false
vector1 |>
  describe()
```

::: {.callout-note collapse="true" title="Click to see the output" icon="false"}
```{r}
#| label: descr_1
#| echo: false
#| eval: true
vector1 |>
  describe()
```
:::

<br> Here, `mean()`, `sd()` and `describe()` are called **functions**. All functions are followed by () where arguments can be placed to specify what action is to be performed. We load particular packages to make use of their functions than enhance R.<br>
<br>
<br>
**6. Save your r file on the cloud in your working directory.**<br>
Once saved, you can download it to your own laptop:<br>

- Click on the More cog icon and select `Export...`<br>
- Choose a name and save it.  It will save to your Downloads folder on your computer.  
- Move it to a folder where you are saving your work for this module.
<br><br>

**7. Import an Excel file (in 'tidy' format)**

- Download the file called *2-sample_cholesterol.xlsx* from Canvas to your Downloads folder.
- In RStudio cloud, select `Upload` in the Files Directory.
- Check the directory where it is to be saved (change it if necessary with 'Browse...')
- Choose your file by browsing to the Downloads folder and selecting the xlsx file
- Click 'OK' and you should see the excel file in your working directory in RStudio

*NB* if you are using your own laptop, you can simply locate the Downloads folder in the Files directory and move the file to your working directory using the 'More' cog icon and 'Move...'
<br>

```{r}
#| label: RStudio_settings.png
#| out.width: "70%"
#| echo: false
knitr::include_graphics("RStudio_settings.png")
```


- Now import the xlsx file and store it as a dataframe called *chol_df* <br>

This code uses the rio package to use the `import()` function. <br>It loads the Excel file and stores the data in a data frame object called '*chol_df*'<br>

```{r}
#| label: file_import
#| echo: TRUE
#| eval: false
chol_df <- import("2-sample_cholesterol.xlsx")
class(chol_df)
```

::: {.callout-note collapse="true" title="Click to see the output" icon="false"}
```{r}
#| label: file_import1
#| echo: false
#| eval: true
chol_df <- import("2-sample_cholesterol.xlsx")
class(chol_df)
```
:::

*NOTE*: this is saved as a data frame. This is the type of object that we will be working with.<br>
<br>
You should now see the chol_df object in the Environment window (top right) in RStudio. <br>
You can view it by simply clicking on the object name in the Environment.

<br>**8. Save the chol_df object as an RData file in your desired folder** <br>(*NB* This code will save the file to wherever your current working directory is set).

This means the data frame is saved and you don't have to import it every time you open RStudio! Just type in R (or just copy and paste the script):

```{r}
#| label: save_RData
#| echo: TRUE
#| results: FALSE
#| message: FALSE
save(chol_df, file="chol_df.RData") #<1>
```
1. Saves the chol_df dataframe as an RData file called chol_df.RData

<br>To open the RData file in future to get the dataframe, simply type

```{r}
#| label: load_RData
#| echo: TRUE
#| results: FALSE
load(file = "chol_df.RData")
```

::::::::::::::::
